version: '3.8'


networks:
  ft_transcendence_network:
    name: ft_transcendence_network


services:
  ft_transcendence_db:
    container_name: ft_transcendence_db
    image: postgres:14
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./app/postgres_data:/var/lib/postgresql/data
    networks:
      - ft_transcendence_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 30s
      retries: 5
    restart: always
  
  backend:
    container_name: backend
    build: app/backend/.
    ports:
      - "8000:8000"
    env_file:
      - app/backend/.env
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=core.settings
    depends_on:
      ft_transcendence_db:
        condition: service_healthy
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/backend:/app/backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    restart: always
  
  frontend:
    container_name: frontend
    build: app/frontend/.
    ports:
      - "5173:5173"
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    
  
  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/redis_data:/data
    restart: always
    depends_on:
      backend:
        condition: service_healthy
  

  nginx:
    container_name: nginx
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./app/nginx.conf:/etc/nginx/nginx.conf
      - ./app/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - ft_transcendence_network
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    restart: always