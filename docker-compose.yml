version: '3.8'

networks:
  ft_transcendence_network:
    name: ft_transcendence_network

services:
  # PostgreSQL Database
  ft_transcendence_db:
    container_name: ft_transcendence_db
    image: postgres:14
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./app/postgres_data:/var/lib/postgresql/data
    networks:
      - ft_transcendence_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 45s
      interval: 5s
      timeout: 30s
    restart: always

  # Django Backend
  backend:
    container_name: backend
    build: app/backend/.
    ports:
      - "8000:8000"
    env_file:
      - app/backend/.env
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
    depends_on:
      ft_transcendence_db:
        condition: service_healthy
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/backend:/app/backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      start_period: 45s
      interval: 5s
      timeout: 30s
    restart: always

  # React Frontend
  frontend:
    container_name: frontend
    build: app/frontend/.
    ports:
      - "5173:5173"
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/health"]
      interval: 5s
      timeout: 30s
    restart: always

  # Redis
  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/redis_data:/data
    depends_on:
      backend:
        condition: service_healthy
    restart: always

  # Nginx
  nginx:
    container_name: nginx
    image: nginx
    ports:
      - "443:443"
    volumes:
      - ./app/nginx/tools/generate_ssl.sh:/app/nginx/tools/generate_ssl.sh
      - ./app/nginx/ssl_certificates:/etc/nginx/ssl
      - ./app/nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./app/backend/profile_pictures:/app/backend/profile_pictures
    command: sh -c "chmod +x /app/nginx/tools/generate_ssl.sh && /app/nginx/tools/generate_ssl.sh && nginx -g 'daemon off;'"
    networks:
      - ft_transcendence_network
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    restart: always
  

  # elasticsearch:
  #   container_name: elasticsearch
  #   image: elasticsearch:8.12.0
  #   privileged: true
  #   environment:
  #     - node.name=elasticsearch
  #     - discovery.type=single-node
  #     - ELASTIC_USERNAME=elastic
  #     - ELASTIC_PASSWORD=test@test
  #     - xpack.security.enabled=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - ft_transcendence_network
  #   volumes:
  #     - ./app/elasticsearch_data:/usr/share/elasticsearch/data
  #     - ./app/elasticsearch/setup-elasticsearch.sh:/app/elasticsearch/setup-elasticsearch.sh
  #   command: >
  #     bash -c "
  #       chmod +x /app/elasticsearch/setup-elasticsearch.sh &&
  #       /app/elasticsearch/setup-elasticsearch.sh
  #       "
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -s -u elastic:test@test http://localhost:9200/_cluster/health | grep -q 'status.*green'"]
  #     interval: 20s
  #     timeout: 30s
  #     retries: 5
  #   restart: always

  # logstash:
  #   container_name: logstash
  #   image: logstash:8.12.0
  #   ports:
  #     - "5044:5044"
  #     - "5000:5000/tcp"
  #     - "5000:5000/udp"
  #   environment:
  #     - LS_JAVA_OPTS=-Xmx512m -Xms512m
  #   networks:
  #     - ft_transcendence_network
  #   volumes:
  #     - ./app/logstash/config/:/usr/share/logstash/config
  #     - ./app/logstash/pipeline:/usr/share/logstash/pipeline
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   restart: always

  # kibana:
  #   container_name: kibana
  #   image: kibana:8.12.0
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #     - ELASTICSEARCH_SERVICE_ACCOUNT_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2tpYmFuYTpCRlktREFZUUJXQUFRUUxPd3dRWA
  #   networks:
  #     - ft_transcendence_network
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   restart: always

  # Elasticsearch
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disable security for simplicity (not recommended in production)
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./app/elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ft_transcendence_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # Logstash
  logstash:
    container_name: logstash
    image: logstash:8.10.2
    ports:
      - "5000:5000"
    volumes:
      - ./app/logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ft_transcendence_network
    restart: always

  # Kibana
  kibana:
    container_name: kibana
    image: kibana:8.10.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ft_transcendence_network
    restart: always
