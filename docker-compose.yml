version: '3.8'

networks:
  ft_transcendence_network:
    name: ft_transcendence_network

volumes:
  certs:
    name: certs
  elasticsearch:
    name: elasticsearch
  kibana:
    name: kibana

services:
  # PostgreSQL Database
  ft_transcendence_db:
    container_name: ft_transcendence_db
    image: postgres:14
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./app/postgres_data:/var/lib/postgresql/data
    networks:
      - ft_transcendence_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 45s
      interval: 5s
      timeout: 30s
    restart: always

  # Django Backend
  backend:
    container_name: backend
    build: app/backend/.
    ports:
      - "8000:8000"
    env_file:
      - app/backend/.env
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
    depends_on:
      ft_transcendence_db:
        condition: service_healthy
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/backend:/app/backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      start_period: 45s
      interval: 5s
      timeout: 30s
    restart: always

  # React Frontend
  frontend:
    container_name: frontend
    build: app/frontend/.
    # ports:
    #   - "5173:5173"
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5173"]
      interval: 5s
      timeout: 30s
    restart: always

  # Redis
  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/redis_data:/data
    depends_on:
      backend:
        condition: service_healthy
    restart: always

  # Nginx
  nginx:
    container_name: nginx
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./app/nginx/tools/generate_ssl.sh:/app/nginx/tools/generate_ssl.sh
      - ./app/nginx/ssl_certificates:/etc/nginx/ssl
      - ./app/nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./app/backend/profile_pictures:/app/backend/profile_pictures
      - ./app/nginx/logs/access.log:/var/log/nginx/access.log
    command: sh -c "chmod +x /app/nginx/tools/generate_ssl.sh && /app/nginx/tools/generate_ssl.sh && nginx -g 'daemon off;'"
    networks:
      - ft_transcendence_network
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    restart: always
  

  #setup for elasticsearch
  setup:
    container_name: setup
    build: ./app/devops/setup/.
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    networks:
      - ft_transcendence_network
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]']
      interval: 1s
      timeout: 5s
      retries: 120
  

  # Elasticsearch
  elasticsearch:
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    build: ./app/devops/elasticsearch/.
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./app/devops/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    env_file:
      - .env
    networks:
      - ft_transcendence_network
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always

  # Kibana
  kibana:
    container_name: kibana
    depends_on:
      setup:
        condition: service_healthy
    build: ./app/devops/kibana/.
    volumes:
      - certs:/usr/share/kibana/config/certs
      - ./app/devops/kibana/data:/usr/share/kibana/data
    ports:
      - '5601:5601'
    env_file:
      - .env
    networks:
      - ft_transcendence_network
    mem_limit: ${MEM_LIMIT}
    restart: always

  # Logstash
  logstash:
    container_name: logstash
    depends_on:
      setup:
        condition: service_healthy
    build: ./app/devops/logstash/.
    volumes:
      - certs:/usr/share/logstash/certs
      - ./app/nginx/logs/access.log:/usr/share/logstash/nginx/access.log
    env_file:
      - .env
    networks:
      - ft_transcendence_network  
    restart: always
