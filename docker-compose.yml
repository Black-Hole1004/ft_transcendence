version: '3.8'

networks:
  ft_transcendence_network:
    name: ft_transcendence_network

volumes:
  certs:
    name: certs
  VaultVol:
      driver_opts:
        o: bind
        type: local
        device: /Users/ahmaymou/ft_transcendence/app/vault

services:
  ft_transcendence_db:
    build:
      context: ./app/db
      dockerfile: Dockerfile  # Path to the custom Dockerfile
    image: postgres:14
    container_name: ft_transcendence_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - ft_transcendence_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 45s
      interval: 5s
      timeout: 30s
    restart: always
    volumes:
      - ./app/db/postgres:/var/lib/postgresql/data
      - ./app/vault/token.txt:/tmp/token.txt
    depends_on:
      vault:
        condition: service_healthy

  # Django Backend
  backend:
    container_name: backend
    build: app/backend/.
    env_file:
      - app/backend/.env
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=core.settings
      - VAULT_ADDR=http://vault:8200
    depends_on:
      ft_transcendence_db:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/backend:/app/backend
      - ./app/vault/token.txt:/tmp/token.txt
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${HOSTNAME}:8000/api/health/"]
      start_period: 45s
      interval: 10s
      timeout: 30s
    restart: always

  # React Frontend
  frontend:
    container_name: frontend
    build: app/frontend/.
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      backend:
        condition: service_healthy
    restart: always

  # Redis
  redis:
    container_name: redis
    image: redis:7
    networks:
      - ft_transcendence_network
    volumes:
      - ./app/data/redis:/data
    depends_on:
      backend:
        condition: service_healthy
    restart: always


############ WAF ############
  appsec-agent:
      image: ghcr.io/openappsec/agent:${APPSEC_VERSION}
      container_name: appsec-agent
      environment:
        - SHARED_STORAGE_HOST=appsec-shared-storage
        - LEARNING_HOST=appsec-smartsync
        - TUNING_HOST=appsec-tuning-svc
        - https_proxy=${APPSEC_HTTPS_PROXY}
        - user_email=${USER_EMAIL}
        - autoPolicyLoad=${APPSEC_AUTO_POLICY_LOAD}
        - registered_server="StarServe App"
      ipc: shareable
      volumes:
        - ${APPSEC_CONFIG}:/etc/cp/conf
        - ${APPSEC_DATA}:/etc/cp/data
        - ${APPSEC_LOGS}:/var/log/nano_agent
        - ${APPSEC_LOCALCONFIG}:/ext/appsec
        - ${RUNNING_SCRIPT_RETRIEVE}:/ext/retrieveFromVault.sh
        - ./app/vault/token.txt:/tmp/token.txt
        - ${APPSEC_ADVANCED_AI}:/advanced-model/open-appsec-advanced-model.tgz:rw
      # command: >
      #   sh -c "
      #     chmod +x /ext/retrieveFromVault.sh &&
      #     sh /ext/retrieveFromVault.sh
      #   "
      restart: always
      depends_on:
        vault:
          condition: service_healthy
      networks:
        - ft_transcendence_network
  appsec-nginx:
    image: ghcr.io/openappsec/nginx-attachment:${APPSEC_VERSION}
    container_name: appsec-nginx
    ipc: service:appsec-agent
    volumes:
      - ${NGINX_CONF_FILE}:/etc/nginx/conf.d/starserve.conf
      - ./app/nginx/tools/generate_ssl.sh:/app/generate_ssl.sh
    user: root
    command: >
      sh -c "
        apk update && apk add openssl || ls -la /app/generate_ssl.sh &&
        chmod +x /app/generate_ssl.sh &&
        sh /app/generate_ssl.sh &&
        nginx -g 'daemon off;'
      "
    networks:
      - ft_transcendence_network
    depends_on:
      - backend
      - frontend
    ports:
      # - "80:80"
      - "443:443"

  appsec-smartsync:
    profiles:
      - standalone
    image: ghcr.io/openappsec/smartsync:${APPSEC_VERSION}
    container_name: appsec-smartsync
    environment:
      - SHARED_STORAGE_HOST=appsec-shared-storage
    depends_on:
      - appsec-shared-storage
  appsec-shared-storage:
    profiles:
      - standalone
    image: ghcr.io/openappsec/smartsync-shared-files:${APPSEC_VERSION}
    container_name: appsec-shared-storage
    ipc: service:appsec-agent
    # user: root
    volumes:
      - ${SMART_SYNC_STORAGE}:/db:z
    networks:
      - ft_transcendence_network
  appsec-tuning-svc:
    profiles:
      - standalone
    build:
      context: ./app/waf/appsec-tuning-svc
      dockerfile: Dockerfile  # Path to the custom Dockerfile
    container_name: appsec-tuning-svc
    environment:
      - SHARED_STORAGE_HOST=appsec-shared-storage
      # - QUERY_DB_PASSWORD=${DB_PASSWORD}
      # - QUERY_DB_HOST=${DB_HOST}
      # - QUERY_DB_USER=${DB_USER}
    volumes:
      - ${APPSEC_CONFIG}:/etc/cp/conf
      - ./app/vault/token.txt:/tmp/token.txt
    depends_on:
      - appsec-shared-storage
      - appsec-db
      - vault
    networks:
      - ft_transcendence_network
  appsec-db:
    profiles:
      - standalone
    build:
      context: ./app/waf/appsec-db
      dockerfile: Dockerfile  # Path to the custom Dockerfile
    container_name: appsec-db
    restart: always
    volumes:
      - ${POSTGRES_STORAGE}:/var/lib/postgresql/data
      # - ${RUNNING_SCRIPT_FETCH}:/usr/local/bin/fetchData.sh  # Mount the script
      - ./app/vault/token.txt:/tmp/token.txt
    networks:
      - ft_transcendence_network
    depends_on:
      vault:
        condition: service_healthy

############ VAULT ############
  vault:
    container_name: vault
    build: ./app/vault/.
    # ports:
    #   - "8200:8200"
    #   - "8201:8201"
    volumes:
      - ./app/vault/token.txt:/tmp/token.txt
      - ./app/vault/unseal_key1.txt:/tmp/unseal_key1.txt
      - ./app/vault/unseal_key2.txt:/tmp/unseal_key2.txt
      - ./app/vault/unseal_key3.txt:/tmp/unseal_key3.txt
    env_file:
      - ./app/vault/.env
    healthcheck:
      test: [
        "CMD",
        "wget", "-qO-", "http://localhost:8200/v1/sys/health?standby=false&sealed=false"
      ]
      interval: 15s
      retries: 5
      start_period: 10s
      timeout: 10s
    networks:
      - ft_transcendence_network

  #setup for elasticsearch
  # comment this :
  setup:
    container_name: setup
    build: ./app/elk/setup/.
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./app/vault/token.txt:/tmp/token.txt
    networks:
      - ft_transcendence_network
    env_file:
      - .env
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]']
      interval: 1s
      timeout: 5s
      retries: 120
  

  # Elasticsearch
  elasticsearch:
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    build: ./app/elk/elasticsearch/.
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./app/data/elasticsearch:/usr/share/elasticsearch/data
      - ./app/vault/token.txt:/tmp/token.txt
    ports:
      - '9200:9200'
    # env_file:
    #   - .env
    networks:
      - ft_transcendence_network
    mem_limit: 1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always

  # Kibana
  kibana:
    container_name: kibana
    depends_on:
      setup:
        condition: service_healthy
    build: ./app/elk/kibana/.
    volumes:
      - certs:/usr/share/kibana/config/certs
      - ./app/data/kibana:/usr/share/kibana/data
      - ./app/vault/token.txt:/tmp/token.txt
    ports:
      - '5601:5601'
    # env_file:
    #   - .env
    networks:
      - ft_transcendence_network
    mem_limit: 1g
    restart: always

  # Logstash
  logstash:
    container_name: logstash
    depends_on:
      setup:
        condition: service_healthy
    build: ./app/elk/logstash/.
    volumes:
      - certs:/usr/share/logstash/certs
      - ./app/nginx/logs/access.log:/usr/share/logstash/nginx/access.log
      - ./app/vault/token.txt:/tmp/token.txt
    # env_file:
    #   - .env
    networks:
      - ft_transcendence_network  
    restart: always

