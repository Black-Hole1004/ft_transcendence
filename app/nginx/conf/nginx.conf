# Define backend service location and port
# upstream blocks define where your services are located.
upstream backend {
    server backend:8000;
}

# Define frontend service location and port
upstream frontend {
    server frontend:5173;
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name localhost localhost:5173;
        
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl;
    server_name localhost;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/certif.crt;
    ssl_certificate_key /etc/nginx/ssl/certif.key;
    ssl_protocols TLSv1.2 TLSv1.3;


    # Handle all frontend routes (React app)
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        # Uses HTTP/1.1 which is required for WebSockets
        # Example: Ensures proper protocol version for WebSocket connections
        proxy_set_header Host $host;
        # Tells your service what domain name was used in the original request
        # Example: if user visited "mysite.com", your service knows it was "mysite.com"
        proxy_set_header X-Real-IP $remote_addr;
        # Passes the original user's IP address
        # Example: if user's IP is "1.2.3.4", your service sees "1.2.3.4" instead of Nginx's IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Keeps track of all IP addresses in the request chain
        # Example: "1.2.3.4, 10.0.0.1" (user's IP, then any intermediate proxies)
        proxy_set_header X-Forwarded-Proto $scheme;
        # Tells your service if the original request was HTTP or HTTPS
        # Example: if user used HTTPS, your service knows it was HTTPS
        proxy_set_header Upgrade $http_upgrade;
        # Used for WebSocket connections to upgrade from HTTP to WebSocket protocol
        # Example: When chat app needs to switch from regular HTTP to real-time WebSocket
        proxy_set_header Connection "upgrade";
        # Works with Upgrade header to establish WebSocket connection
        # Example: Like saying "yes" to the upgrade request for WebSocket
        proxy_buffering off;
        # Sends data immediately without waiting to collect more
        # Example: In a chat app, messages are sent instantly instead of being queued
        proxy_cache_bypass $http_upgrade;
        # Skips cache for WebSocket connections to ensure real-time data
        # Example: Makes sure you get live chat messages, not cached old ones
    }


    # Handle API routes (/api/*)
    location /api/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_buffering off;
    }

    location /admin/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
    }

    location /profile_pictures/ {
        alias /app/staticfiles/profile_pictures/;
    }

    location /badges/ {
        alias /app/staticfiles/badges/;
    }

    location /ws/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400s;
        # Keeps WebSocket connection alive for 24 hours
        # Example: Chat app can stay connected for a day without timing out
        proxy_buffering off;
    }

    client_max_body_size 100M;
}