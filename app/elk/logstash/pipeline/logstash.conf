input {
    file {
        path => "/usr/share/logstash/starserve-logs/*"
        # The absolute path to the file(s) Logstash should monitor and process.
        # Supports wildcards for multiple files (e.g., "path => "/usr/share/logstash/starserve-logs/*").

        start_position => "beginning" 
        # Specifies where to start reading the file.
        # "beginning" means Logstash starts reading from the first line of the file.

        sincedb_path => "/dev/null" 
        # Path to the sincedb file, which tracks the read progress of the file.
        # "/dev/null" disables progress tracking, so the file is always re-read from the start
        # (useful for testing or reprocessing logs).
    }
}

output {
    elasticsearch {
        hosts => ["https://elasticsearch:9200"] 
        # The URL of the Elasticsearch instance where the logs should be sent.
        # Multiple hosts can be specified as an array for redundancy.

        user => "elastic" 
        # The username for authenticating with the Elasticsearch instance.

        password => "${ELASTIC_PASSWORD}" 
        # The password for the Elasticsearch user.
        # Using an environment variable (`ELASTIC_PASSWORD`) for security instead of hardcoding it.

        index => "starserve-logs-%{+YYYY.MM.dd}" 
        # The name of the index where the logs will be stored in Elasticsearch.
        # The `%{+YYYY.MM.dd}` is a date pattern, which creates a new index daily (e.g., `starserve-logs-2025.01.16`).

        ssl_enabled => true 
        # Enables SSL for secure communication with Elasticsearch.

        ssl_verification_mode => "full" 
        # None - No verification is performed.
        # Specifies the SSL verification mode. 
        # "full" ensures that the Elasticsearch server's certificate is fully verified.

        ssl_certificate_authorities => ["/usr/share/logstash/certs/ca/ca.crt"] 
        # Path to the certificate authority (CA) certificate that Logstash uses to verify the SSL certificate
        # of the Elasticsearch server.
    }

    stdout { codec => rubydebug } 
    # Adds an additional output to the standard output (console).
    # The `codec => rubydebug` formats the log data in a human-readable way, useful for debugging.
}